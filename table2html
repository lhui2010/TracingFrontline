#!/bin/bash
set -euo pipefail

###Generated by argbash
# ARG_OPTIONAL_SINGLE([output],[o],[output directory],[./])
# ARG_OPTIONAL_SINGLE([keyword],[k],[specify keyword],[genom\|assembly\|sequencing])
# ARG_OPTIONAL_BOOLEAN([rotate],[],[archive current html and clear database],[off])
# ARG_HELP([Table2HTML: transform rss feeds into html file])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}


begins_with_short_option()
{
    local first_option all_short_options='okh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output="./"
_arg_keyword="genom\|assembly\|sequencing"
_arg_rotate="off"


print_help()
{
    printf '%s\n' "Table2HTML: transform rss feeds into html file"
    printf 'Usage: %s [-o|--output <arg>] [-k|--keyword <arg>] [--(no-)rotate] [-h|--help]\n' "$0"
    printf '\t%s\n' "-o, --output: output directory (default: './')"
    printf '\t%s\n' "-k, --keyword: specify keyword (default: 'genom\|assembly\|sequencing')"
    printf '\t%s\n' "--rotate, --no-rotate: archive current html and clear database (off by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -o|--output)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_output="$2"
                shift
                ;;
            --output=*)
                _arg_output="${_key##--output=}"
                ;;
            -o*)
                _arg_output="${_key##-o}"
                ;;
            -k|--keyword)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_keyword="$2"
                shift
                ;;
            --keyword=*)
                _arg_keyword="${_key##--keyword=}"
                ;;
            -k*)
                _arg_keyword="${_key##-k}"
                ;;
            --no-rotate|--rotate)
                _arg_rotate="on"
                test "${1:0:5}" = "--no-" && _arg_rotate="off"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
                ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# ] <-- needed because of Argbash


###



#echo "Value of --ooutput: $_arg_output"
#echo "rotate is $_arg_rotate"
#echo "keyword is $_arg_keyword"
#
Date=`date +"%m-%d-%Y"`

#keyword='genom\|assembly\|sequencing'
KEYWORD=$_arg_keyword
ROTATE=$_arg_rotate
HTML_DIR=$_arg_output

#First test wether $1 is given or we will use default output dir "."
#https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
ASSET_DIR="asset"
ARCHIVE_DIR="archive"
DB_DIR="db"

if [ ${ROTATE} == "on" ]
then 
#Rotate means current rss html will be archived and all current data stored in content.db are wiped
#Use it when you find the html list is too long
    mkdir -p ${HTML_DIR}/${ARCHIVE_DIR}
#Split
    sed "14s/${ARCHIVE_DIR}/./" ${HTML_DIR}/rss.html > ${HTML_DIR}/${ARCHIVE_DIR}/rss-${Date}.html
    sed "14s/${ARCHIVE_DIR}/./" ${HTML_DIR}/rss-all.html > ${HTML_DIR}/${ARCHIVE_DIR}/rss-all-${Date}.html
    touch ${DB_DIR}/content.db &&  rm  ${DB_DIR}/content.db 
    echo "<a href=\"${ARCHIVE_DIR}/rss-${Date}.html\" class=\"btn btn-primary btn-xs\" role=\"button\">Previous Week</a>" >${DB_DIR}/prev.html
    echo "<a href=\"./rss-all.html\" class=\"btn btn-primary btn-xs\" role=\"button\">Full Repertoire</a>" >>${DB_DIR}/prev.html
    echo "<a href=\"${ARCHIVE_DIR}/rss-all-${Date}.html\" class=\"btn btn-primary btn-xs\" role=\"button\">Previous Week</a>" >${DB_DIR}/prev-all.html
    echo "<a href=\"./rss.html\" class=\"btn btn-primary btn-xs\" role=\"button\">Slim Version</a>" >>${DB_DIR}/prev-all.html
fi


#############
#transform rss to table
python3 rss2table.py table >>${DB_DIR}/content.db
#Add spacing line between different rss source
sed 's/<hr>//g' ${DB_DIR}/content.db |sort -k1,1 -k2,2nr |uniq  >${DB_DIR}/content.db.sortuq
perl add_hr.pl ${DB_DIR}/content.db.sortuq >${DB_DIR}/content.db.all
grep ${KEYWORD} ${DB_DIR}/content.db.sortuq | perl add_hr.pl >${DB_DIR}/content.db.genome

cat ${ASSET_DIR}/head.html >${DB_DIR}/index.html
touch ${DB_DIR}/prev.html ${DB_DIR}/prev-all.html
echo "<h3>Updated in ${Date}</h3>" >>${DB_DIR}/index.html
sed '6s/Tracing Frontline/Full Repertoire/'  ${DB_DIR}/index.html >${DB_DIR}/index-all.html
cat ${DB_DIR}/prev.html >>${DB_DIR}/index.html
cat ${DB_DIR}/prev-all.html >>${DB_DIR}/index-all.html
cut -f3 ${DB_DIR}/content.db.genome >>${DB_DIR}/index.html
cut -f3 ${DB_DIR}/content.db.all >>${DB_DIR}/index-all.html

cat ${DB_DIR}/prev.html ${ASSET_DIR}/foot.html >>${DB_DIR}/index.html
cat ${DB_DIR}/prev-all.html ${ASSET_DIR}/foot.html >>${DB_DIR}/index-all.html
###
#debug
#cp index.html ../themes/casper/test.html

#production
mv ${DB_DIR}/index.html ${HTML_DIR}/rss.html
mv ${DB_DIR}/index-all.html ${HTML_DIR}/rss-all.html
